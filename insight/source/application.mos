(!******************************************************
   Xpress Insight vdlx-datagrid examples
   =============================

   file application.mos
   ```````````````````````
   Test model for vdlx-datagrid demo views.

    (c) Copyright 2023 Fair Isaac Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*******************************************************!)
model "vdlx-datagrid examples"
  uses "mminsight"
  version 5.0.0

  !@insight.resultdata.delete on-execute
  !@insight.execmodes.FAST.threads=1
  !@insight.execmodes.FAST.preferredservice=SECONDARY
  !@insight.execmodes.REPORT.threads=8

  ! inform the compiler that that all the global annotations have now been defined.
  !@mc.flush

  parameters
    MyParam = "insight"
    LENGTH = 400
    DATAFOLDER = ""
    DATAFILE = DATAFOLDER + "agency_example_data.txt"
    TRANSPORT_DATAFILE = DATAFOLDER + "transport.dat"
    MaxPeriods = 15
    LOAD_SLEEP = 0
    RUN_SLEEP = 0
  end-parameters

  ! *** Declare public data *** !
  public declarations
    mycounter: integer
    !@insight.alias A scalar
    MyScalar: string        ! A string scalar

    !@insight.alias A boolean
    MyBool: boolean         ! A boolean
    MyDate: string          ! A date
    MyDate2: string         ! A date
    MyDate3: string         ! A date
    MyDate4: string         ! A date
    MyDate5: string         ! A date
    Month: string           ! Current month as string

    ! several scalars for testing a display issue
    entityBoolA: boolean
    entityBoolB: boolean
    entityBoolC: boolean
    entityBoolD: boolean
    entityBoolE: boolean
    entityBoolF: boolean

    entityIntA: integer
    entityIntB: integer
    entityIntC: integer
    entityIntD: integer

    !@insight.alias Support level
    SupportLevel: integer   ! The selected support level

    !@insight.transform.labels.entity PlanetNamesFromString
    SelectedPlanetString: string

    !@insight.transform.labels.entity PlanetNamesFromInteger
    SelectedPlanetInteger: integer

    !@insight.transform.labels.entity PlanetNamesFromInteger
    UnknownPlanetInteger: integer

    !@insight.update.afterexecution true
    reported_execution_mode: string

    ParamLabelIndices = {"insight", "400", ""}
    ParamLabels : array(ParamLabelIndices) of string

    ! Set of months

    !@insight.alias Months of the year
    MonthsOfYear: set of string
    Settings: array(MonthsOfYear) of string

    Factories: set of string                       ! Set of factories
    FactoryCapacities: array(Factories) of integer ! Factory capacity
    FactorySupply: array(Factories, MonthsOfYear) of integer ! Factory supply

    !@insight.transform.labels.entity StockSizeLabels
    StockSizeValues = 0..2

    StockSizeLabels: array(StockSizeValues) of string
    !@insight.transform.labels.entity StockSizeLabels
    StockSizes: array(Factories, MonthsOfYear) of integer

    Customers: set of string
    FactoryCustomerAgreements: array(Factories, MonthsOfYear, Customers) of real

    !@insight.alias Factory Demand (units)
    FactoryDemand: array(Factories, MonthsOfYear) of integer ! Factory demand

    !@insight.alias Shipping costs
    ShippingCosts: array(Factories, Factories) of real ! Costs for shipping between factories

    !@insight.transform.labels.entity SupportLevelNames
    SupportLevels = 0..2                           ! Set of support levels

    ! for labels data example
    !@insight.transform.labels.entity CountryCodesLabel
    CountryCodes: set of string
    CountryCodesLabel: array(CountryCodes) of string

    !@insight.transform.labels.entity StatTypeLabels
    StatTypes: set of string

    StatTypeLabels: array(StatTypes) of string

    Matches: range
    CountryStats: dynamic array(CountryCodes, StatTypes, Matches) of real

    SupportLevelNames: array(SupportLevels) of string ! Support level names
    !@insight.alias Support Costs
    SupportCosts: array(SupportLevels) of real     ! Support level cost
    SupportRenewed: array(SupportLevels) of boolean! Support renewed by client
    SupportPaid: array(SupportLevels) of string    ! Support costs have been paid. Client will put Paid or Pending in this
    !@insight.alias Service Level Agreements
    ServiceLevelAgreements: array(SupportLevels) of integer ! Support level contract

    Indices = 1..LENGTH                            ! Set of indices
    RealArray: array(Indices) of real              ! Array of reals
    IntArray: array(Indices) of integer            ! Array of integers
    demand: integer
    percent: real

    ! Sets
    AGENCY: set of string                       ! Collections agencies

    ! Agency data
    MIN_AGENT_ACCOUNTS: array(AGENCY) of real   ! Min number of contracts per agent
    MAX_AGENT_ACCOUNTS: array(AGENCY) of real   ! Max number of contracts per agent
    NAGENTS: array(AGENCY) of real              ! Number of agents per agency
    MIN_AGENT_COMMISSION: array(AGENCY) of real ! Minimum commission per agent
    MAX_PERC_AGENCY: array(AGENCY) of real      ! Maximum percentage per agency

    ! Definitions for GUI
    AGENCYNAME: array(AGENCY) of string         ! Agency name/description
	!public declaration
	DAYS: set of string                 ! Days in planning period
	SITES: range                        ! Work locations
	staffingpersite: array(DAYS, SITES) of mpvar ! Number of staff per site
	STAFF: set of string                ! All persons to schedule
	assign: array(STAFF,DAYS,SITES) of mpvar    ! Worksite assignments

    !@insight.transform.labels.entity PlanetNamesFromInteger
    PlanetsAsInteger : set of integer

    !@insight.transform.labels.entity PlanetNamesFromString
    PlanetsAsString : set of string
    PlanetNamesFromInteger: array(PlanetsAsInteger) of string
    PlanetNamesFromString: array(PlanetsAsString) of string

    ObservedPlanetsIndex = 0..3

    !@insight.transform.labels.entity PlanetNamesFromString
    ObservedPlanetsAsString: array(ObservedPlanetsIndex) of string

    !@insight.transform.labels.entity PlanetNamesFromInteger
    ObservedPlanetsAsInteger: array(ObservedPlanetsIndex) of integer

    ! read in table 1
    ! t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE,t1Col1,t1Col2,t1Col3,t1Col4,t1Col5,t1Col6

    !@insight.transform.labels.entity t1IndexNames
    t1IndexA = 1..4
    t1IndexNames:array(t1IndexA) of string

    !@insight.transform.labels.entity t1IndexNames2
    t1IndexB = 1..4
    t1IndexNames2:array(t1IndexB) of string

    !@insight.transform.labels.entity t1IndexNames3
    t1IndexC = 1..5
    t1IndexNames3:array(t1IndexC) of string

    t1IndexD = 1..5
    t1IndexE = 1..5

    t1Col1,t1Col2,t1Col3,t1Col4,t1Col5: array(t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE) of integer
    t1Col6: array(t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE) of boolean

    ! read in table 2
    ! t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF,t2Col1,t2Col2,t2Col3,t2Col4
    !@insight.transform.labels.entity t2IndexNames
    t2IndexA = 1..5
    t2IndexNames:array(t2IndexA) of string

    !@insight.transform.labels.entity t2IndexNames2
    t2IndexB = 1..5
    t2IndexNames2:array(t2IndexB) of string

    !@insight.transform.labels.entity t2IndexNames3
    t2IndexC = 1..5
    t2IndexNames3:array(t2IndexC) of string

    t2IndexD = 1..4
    t2IndexE = 1..4
    t2IndexF = 1..5
   ! t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF: set of integer
    t2Col1: array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of real
    t2Col2: array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of boolean
    t2Col3: array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of string
    t2Col4: array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of integer


    ! read in table 3
    ! t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF,t3Col1,t3Col2,t3Col3,t3Col4
    !@insight.transform.labels.entity t3IndexNames
    t3IndexA = 1..10
    t3IndexNames:array(t3IndexA) of string

    !@insight.transform.labels.entity t3IndexNames2
    t3IndexB = 1..10
    t3IndexNames2:array(t3IndexB) of string

    !@insight.transform.labels.entity t3IndexNames3
    t3IndexC = 1..10
    t3IndexNames3:array(t3IndexC) of string

    t3IndexD = 1..5
    t3IndexE = 1..4
    t3IndexF = 1..5
    !t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF: set of integer
    t3Col1:  array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of real
    t3Col2:  array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of boolean
    t3Col3:  array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of string
    t3Col4:  array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of integer

    ! read in table 4
    ! t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF,t4Col1,t4Col2,t4Col3,t4Col4
    !@insight.transform.labels.entity t3IndexNames
    t4IndexA = 1..10

    !@insight.transform.labels.entity t3IndexNames2
    t4IndexB = 1..10

    !@insight.transform.labels.entity t3IndexNames3
    t4IndexC = 1..5
    t4IndexD = 1..10
    t4IndexE = 1..10
    t4IndexF = 1..10
    !t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF: set of integer
    t4Col1:  array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of real
    t4Col2:  array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of boolean
    t4Col3:  array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of string
    t4Col4:  array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of integer

    ! read in table 5
    ! t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF,t5Col1,t5Col2,t5Col3,t5Col4
    !@insight.transform.labels.entity t3IndexNames
    t5IndexA = 1..10

    !@insight.transform.labels.entity t3IndexNames2
    t5IndexB = 1..10
    !@insight.transform.labels.entity t3IndexNames3
    t5IndexC = 1..10
    t5IndexD = 1..10
    t5IndexE = 1..10
    t5IndexF = 1..10
    !t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF: set of integer
    t5Col1:  array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of real
    t5Col2:  array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of boolean
    t5Col3:  array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of string
    t5Col4:  array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of integer

    MAT: set of integer
    SITE: set of string
    VEN: set of string
    MAT_NAMES: set of string

    T= 1..MaxPeriods
    UI_PurchPrice:         array(SITE,VEN,MAT,MAT_NAMES,T) of real
    UI_PurchMin:           array(SITE,VEN,MAT,MAT_NAMES,T) of real
    UI_PurchMax:           array(SITE,VEN,MAT,MAT_NAMES,T) of real
    UI_IsPurchMatInT:      array(SITE,VEN,MAT,MAT_NAMES,T) of boolean
    UI_OwnProdPerPeriod:   array(SITE,VEN,MAT,MAT_NAMES,T) of boolean

    PERIODS: set of integer
    CITIES: set of string
    distance : dynamic array(CITIES, CITIES) of real        ! distance from origin to destination
    mapCity2Ctry: dynamic array(CITIES) of string           ! mapping from each city to its country
    amount: dynamic array(CITIES,CITIES,PERIODS) of real            ! amount shipped from origin to destination per period;  well, it is an array of mpvar, but let us keep it simple
  end-declarations

  !First Table
  procedure LoadTableOne2k
    forall (a in t1IndexA,b in t1IndexB,c in t1IndexC,d in t1IndexD,e in t1IndexE) do
        t1Col1(a,b,c,d,e) :=integer(round((1000*random)+0.5))
        t1Col2(a,b,c,d,e) :=integer(round((1000*random)+0.5))
        t1Col3(a,b,c,d,e) :=integer(round((1000*random)+0.5))
        t1Col4(a,b,c,d,e) :=integer(round((1000 *random)+0.5))
        t1Col5(a,b,c,d,e) :=integer(round((1000 *random)+0.5))
        if e mod 2 = 0 then          ! Mosel's built-in mod operator
          t1Col6(a,b,c,d,e) :=false                    ! The same as sum:= sum + d
        else
          t1Col6(a,b,c,d,e) :=true                    ! The same as sum:= sum + d
        end-if
    end-do
  end-procedure

  !Second Table
  procedure LoadTableTwo10K
    forall (a in t2IndexA,b in t2IndexB,c in t2IndexC,d in t2IndexD,e in t2IndexE, f in t2IndexF) do
        t2Col1(a,b,c,d,e,f) :=integer(round((1000*random)+0.5))
        if e mod 2 = 0 then          ! Mosel's built-in mod operator
          t2Col2(a,b,c,d,e,f) :=false                    ! The same as sum:= sum + d
        else
          t2Col2(a,b,c,d,e,f) :=true                    ! The same as sum:= sum + d
        end-if
        t2Col3(a,b,c,d,e,f) :="a long string"
        t2Col4(a,b,c,d,e,f) :=integer(round((1000 *random)+0.5))

    end-do
  end-procedure

  !Third Table
  procedure LoadTableThree100K
    forall (a in t3IndexA,b in t3IndexB,c in t3IndexC,d in t3IndexD,e in t3IndexE, f in t3IndexF) do
        t3Col1(a,b,c,d,e,f) :=integer(round(10000*random))
        if e mod 2 = 0 then          ! Mosel's built-in mod operator
          t3Col2(a,b,c,d,e,f) :=false                    ! The same as sum:= sum + d
        else
          t3Col2(a,b,c,d,e,f) :=true                    ! The same as sum:= sum + d
        end-if
        t3Col3(a,b,c,d,e,f) :="a long string"
        t3Col4(a,b,c,d,e,f) :=integer(round((10000 *random)+0.5))

    end-do
  end-procedure

  !Fourth Table
  procedure LoadTableFour500K
    forall (a in t4IndexA,b in t4IndexB,c in t4IndexC,d in t4IndexD,e in t4IndexE, f in t4IndexF) do
        t4Col1(a,b,c,d,e,f) :=integer(round((1000*random)+0.5))
        if e mod 2 = 0 then          ! Mosel's built-in mod operator
          t4Col2(a,b,c,d,e,f) :=false                    ! The same as sum:= sum + d
        else
          t4Col2(a,b,c,d,e,f) :=true                    ! The same as sum:= sum + d
        end-if
        t4Col3(a,b,c,d,e,f) :="a long string"
        t4Col4(a,b,c,d,e,f) :=integer(round((1000 *random)+0.5))
    end-do
  end-procedure

  !Fifth Table
  procedure LoadTableFive1Million
    forall (a in t5IndexA,b in t5IndexB,c in t5IndexC,d in t5IndexD,e in t5IndexE, f in t5IndexF) do
        t5Col1(a,b,c,d,e,f) :=integer(round((1000*random)+0.5))
        if e mod 2 = 0 then          ! Mosel's built-in mod operator
          t5Col2(a,b,c,d,e,f) :=false                    ! The same as sum:= sum + d
        else
          t5Col2(a,b,c,d,e,f) :=true                    ! The same as sum:= sum + d
        end-if
        t5Col3(a,b,c,d,e,f) :="a long string"
        t5Col4(a,b,c,d,e,f) :=integer(round((1000 *random)+0.5))
    end-do
  end-procedure

  procedure datainput
    SITE:= {"OneSite","TwoSite","ThreeeSite","FourSite","FiveSite","SixSite","SevenSite"}
    VEN:= {"v_OneSite","v_TwoSite","v_ThreeeSite","v_FourSite","v_FiveSite","v_SixSite","v_SevenSite"}
    MAT_NAMES:=  {"MAT_OneSite","MAT__TwoSite","MAT__ThreeeSite","MAT__FourSite","MAT__FiveSite","MAT__SixSite","MAT__SevenSite"}
    MAT:= {1,2,3,4,5,6,7,8,9,10,11,12}

    PlanetsAsString := {"1", "2", "3", "4", "5", "6", "7", "8", "9"}
    PlanetsAsInteger := {1, 2, 3, 4, 5, 6, 7, 8, 9}

    PlanetNamesFromInteger(1) := "Mercury"
    PlanetNamesFromInteger(2) := "Venus"
    PlanetNamesFromInteger(3) := "Earth"
    PlanetNamesFromInteger(4) := "Mars"
    PlanetNamesFromInteger(5) := "Jupiter"
    PlanetNamesFromInteger(6) := "Saturn"
    PlanetNamesFromInteger(7) := "Uranus"
    PlanetNamesFromInteger(8) := "Neptune"

    PlanetNamesFromString("1") := "Mercury"
    PlanetNamesFromString("2") := "Venus"
    PlanetNamesFromString("3") := "Earth"
    PlanetNamesFromString("4") := "Mars"
    PlanetNamesFromString("5") := "Jupiter"
    PlanetNamesFromString("6") := "Saturn"
    PlanetNamesFromString("7") := "Uranus"
    PlanetNamesFromString("8") := "Neptune"

    ObservedPlanetsAsString(0) := "1"
    ObservedPlanetsAsString(1) := "2"
    ObservedPlanetsAsString(2) := "3"
    ObservedPlanetsAsString(3) := "9"

    ObservedPlanetsAsInteger(0) := 8
    ObservedPlanetsAsInteger(1) := 7
    ObservedPlanetsAsInteger(2) := 6
    ObservedPlanetsAsInteger(3) := 9

    ParamLabels("insight") := "insight (LABEL)"
    ParamLabels("400") := "Four hundred (LABEL)"
    ParamLabels("") := "empty (LABEL)"

    MonthsOfYear := {"January", "February", "March",
	    "April", "May", "June", "July", "August",
	    "September", "October", "November", "December"}

    Settings("January") := "Bob"

    DAYS := {"FRI","SAT","SUN","MON","TUE","WED","THU"}

    Factories := {"New York", "Paris", "Peckham"}

    FactoryCapacities("New York") := 1030
    FactoryCapacities("Paris") := 890
    FactoryCapacities("Peckham") := 920

    StockSizeLabels(0) := "Small"
    StockSizeLabels(1) := "Medium"
    StockSizeLabels(2) := "Large"

    Customers := {"Acme", "Wonka", "Wayne Enterprises"}

    forall (f in Factories) do
      forall (m in MonthsOfYear) do
        FactorySupply(f,m) := ceil((demand / 100) * 130)
        FactoryDemand(f,m) := demand
        forall (c in Customers) do
          FactoryCustomerAgreements(f, m, c) := demand * random
        end-do

        StockSizes(f, m) := demand mod 3
        demand += 1
      end-do
    end-do

    forall (f1 in Factories, f2 in Factories) do
        ShippingCosts(f1, f2) := random
    end-do

    MyScalar := MyParam
    MyBool := TRUE
    Month := "March"
    MyDate := "2014-01-12" ! Default Format
    MyDate2 := "09/29/2014" ! US Format
    MyDate3 := "15/12/2014" ! UK Format
    MyDate4 := "2011-11-19" ! Default Format
    MyDate5 := "2011-11-19" ! Default Format
    SupportLevel := 1
    SelectedPlanetString := "2" ! Venus is selected
    SelectedPlanetInteger := 4 ! Mars is selected
    UnknownPlanetInteger := 9 ! Unknown planet

    entityBoolA := true
    entityBoolB := true
    entityBoolC := true
    entityBoolD := true
    entityBoolE := true
    entityBoolF := true
    entityIntA := 1
    entityIntB := 20
    entityIntC := 300
    entityIntD := 4000


    SupportLevelNames :: ["Bronze", "Silver", "Gold"]
    SupportCosts :: [100.0, 250.0, 500.0]
    SupportRenewed :: [FALSE, TRUE, FALSE]
    SupportPaid :: ['Pending', 'Paid', 'Pending']
    ServiceLevelAgreements :: [48, 24, 1]

    forall (i in Indices) do
      RealArray(i) := floor(random * 10000) / 100
      IntArray(i) := floor(random * 150)
    end-do

    initializations from DATAFILE
        AGENCYNAME
        MIN_AGENT_ACCOUNTS
        MAX_AGENT_ACCOUNTS
        NAGENTS
        MIN_AGENT_COMMISSION
        MAX_PERC_AGENCY
    end-initializations

    initializations from TRANSPORT_DATAFILE
      mapCity2Ctry as 'CITIES'
      distance as 'DISTANCES'
      amount as 'AMOUNTS'
     end-initializations

     !A table to display
     ! it uses look-up columns in arbitrary order
     writeln( "Period" +"\t| "+ "Destination" +"\t| "+ "Ctry of dest" + "\t| "+ "Origin" +"\t| "+ "Ctry of orig" +"\t| "+ "Distance" +"\t| "+ "Amount" )
     forall(p in PERIODS, c1 in CITIES, c2 in CITIES) do
       writeln( string(p) +"\t| "+ c2 +"\t| "+ mapCity2Ctry(c2) + "\t| "+c1 +"\t| "+ mapCity2Ctry(c1) +"\t| "+ distance(c1,c2) +"\t| "+ amount(c1,c2,p) )
     end-do

    t1IndexNames  :: ["Alpha","Beta","Gamma","Delta"]
    ! initializations from "mmsheet.csv:table1.csv"
    !     [t1Col1,t1Col2,t1Col3,t1Col4,t1Col5,t1Col6] as "skiph;[A1:K2001]"
    ! end-initializations
    t1IndexNames::["Alpha","Beta","Gamma","Delta"]
    t1IndexNames2::["Alpha2","Beta2","Gamma2","Delta2"]
    t1IndexNames3::["Alpha3","Beta3","Gamma3","Delta3","Penta"]

    t2IndexNames  :: ["White","Yellow","Orange","Green","Blue"]
    t2IndexNames2 :: ["White2","Yellow2","Orange2","Green2","Blue2"]
    t2IndexNames3 :: ["White3","Yellow3","Orange3","Green3","Blue3"]

    t3IndexNames  :: ["Antigua and Barbuda","Marshall Islands","Mecklenburg-Schwerin","Montenegro","Equatorial Guinea","Russia","Czechoslovakia","Pakistan","Brunswick and Lüneburg","Bosnia and Herzegovina"]
    t3IndexNames2 :: ["2_Antigua and Barbuda","2_Marshall Islands","2_Mecklenburg-Schwerin","2_Montenegro","2_Equatorial Guinea","2_Russia","2_Czechoslovakia","2_Pakistan","2_Brunswick and Lüneburg","2_Bosnia and Herzegovina"]
    t3IndexNames3 :: ["3_Antigua and Barbuda","3_Marshall Islands","3_Mecklenburg-Schwerin","3_Montenegro","3_Equatorial Guinea","3_Russia","3_Czechoslovakia","3_Pakistan","3_Brunswick and Lüneburg","3_Bosnia and Herzegovina"]

    LoadTableOne2k
    LoadTableTwo10K
    LoadTableThree100K
	  LoadTableFour500K
	  LoadTableFive1Million

    mycounter:=1
    forall(i in SITE,j in VEN,k in MAT,l in MAT_NAMES,m in T) do
        UI_PurchPrice(i,j,k,l,m):=round(100*random)         !dynamic array(SITE,VEN,MAT,MAT_NAMES,T) of real
        UI_PurchMin(i,j,k,l,m):=round(100*random)          !dynamic array(SITE,VEN,MAT,MAT_NAMES,T) of real
        UI_PurchMax(i,j,k,l,m):= round(10000*random)           !dynamic array(SITE,VEN,MAT,MAT_NAMES,T) of real
        UI_IsPurchMatInT(i,j,k,l,m):= false     !dynamic array(SITE,VEN,MAT,MAT_NAMES,T) of boolean
        UI_OwnProdPerPeriod(i,j,k,l,m):= true  !dynamic array(SITE,VEN,MAT,MAT_NAMES,T) of boolean
        mycounter:=mycounter+1
    end-do


    CountryCodes := {'UK','FR','IT', 'USA'}
    CountryCodesLabel('UK') := 'United Kingdom'
    CountryCodesLabel('FR') := 'France'
    CountryCodesLabel('IT') := 'Italy'
    CountryCodesLabel('USA') := 'United States'

    StatTypes := {'1','2','3','4','5'}

    StatTypeLabels('1') := 'Goals For'
    StatTypeLabels('2') := 'Goals Against'
    StatTypeLabels('3') := 'Shots For'
    StatTypeLabels('4') := 'Shots Against'
    StatTypeLabels('5') := 'Possession'

    Matches := 1..6

    forall(a in CountryCodes, b in StatTypes, c in Matches) do
      CountryStats(a,b,c) := integer(round((100*random)+0.5))
    end-do

  end-procedure

  forall(d in DAYS, s in SITES) do
    staffingpersite(d,s) = sum(p in STAFF) assign(p,d,s)
  end-do


  case insightgetmode of
    INSIGHT_MODE_LOAD: do
      sleep(LOAD_SLEEP*1000)
      datainput
      LoadTableOne2k
      LoadTableTwo10K
      LoadTableThree100K
	    LoadTableFour500K
	    LoadTableFive1Million
    end-do
    INSIGHT_MODE_RUN: do
      sleep(RUN_SLEEP*1000)
      insightpopulate
    end-do
    "FAST": do
    	writeln("FAST STUPID - Execution mode")
    end-do
    "REPORT": do
    	writeln("REPORT - Execution mode")
    end-do
  end-case

  reported_execution_mode := insightgetmode
  writeln("UI arrays total rows: ",mycounter);
  writeln("EXECUTION MODE:", reported_execution_mode)

  writeln("\nModel run finished.")

end-model
